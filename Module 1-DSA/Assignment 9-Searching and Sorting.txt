Q.1 Given a 1-indexed array of integers numbers that are already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.
Return the indices of the two numbers, index1, and index2, added by one as an integer array [index1, index2] of length 2.
The tests are generated such that there is exactly one solution. You may not use the same element twice.
Your solution must use only constant extra space.
Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Ans.
class Solution {
    public int[] twoSum(int[] numbers, int target) {
         int[] ans1 = new int[2];
        int start = 0;
        int end = numbers.length-1;
        while(start<=end){
            if(numbers[start]+ numbers[end]< target){
                start = start +1;
            }
            else if (numbers[start] + numbers[end] > target){
                end=end-1;
            }
            else {
                
                ans1[0]=start+1;
                ans1[1]=end+1;
                return ans1;
            }
        }
        return ans1;
    }
}

Q.2 Given an array of integer nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If the target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Ans. 
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int ans[] = {-1,-1};
        int start = search(nums, target, true);
        int end = search(nums,target,false);
        ans[0] = start;
        ans[1] = end;

        return ans;
    }

        int search(int[] nums, int target, boolean findStartIndex){
            int ans = -1;
            int start = 0;
            int end = nums.length - 1;

        while(start <= end){
            int mid = start + (end - start) / 2;

            if(target < nums[mid]){
                end = mid - 1;
            }
            else if(target > nums[mid]){
                start = mid + 1;
            }
            else{
                // Potential answer
                ans = mid;

                if(findStartIndex){
                    end = mid -1;
                }
                else{
                    start = mid + 1;
                }
            }
        }
        return ans;  
    } 
}

Q.3 A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Ans. 
class Solution {
    public int findPeakElement(int[] arr) {
        int max = arr[0];
        int max_index = 0;

        for(int i=0; i<arr.length; i++){
            if(arr[i] > max){
                max = arr[i];
                max_index = i;
            }
        }
        return max_index;
    }
}

Q.4 Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
Input: nums = [1,3,5,6], target = 5
Output: 2

Input: nums = [1,3,5,6], target = 7
Output: 4
Ans.
class Solution {
    public int searchInsert(int[] nums, int target) {
        //Binary Searach
        int low=0;
        int high=nums.length-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>=target){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return low;

    }
}

Q.5 Find the majority element in the array. A majority element in an array A[] of size n is an element that appears more than n/2 times (and hence there is at most one such element). 
Input: A[]={3, 3, 4, 2, 4, 4, 2, 4, 4}
Output: 4
Explanation: The frequency of 4 is 5 which is greater than half of the size of the array size. 
Ans. 
class Solution {
    public int searchInsert(int[] nums, int target) {
        //Binary Searach
        int low=0;
        int high=nums.length-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]>=target){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return low;

    }
}

Q.6 You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which returns whether the version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.
Ans.
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
         int low = 0, high = n , mid = 0;
        while(low <= high){
            mid = low + (high - low) / 2;
            if(isBadVersion(mid)){
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return low;
    }
}

Q.7 Given an array of integers, find the inversion of an array. Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
N=5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: (2,1) (4,1) and (4,3) forms an inversion in an array
Ans. public static int getInversions(int[] A, int n) {
  int count = 0;
 
  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
      if (A[i] > A[j]) {
        count += 1;
      }
 
    }
  }
  return count;
}




